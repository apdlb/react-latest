{"version":3,"sources":["i18n/index.ts","components/IntlProviderWrapper/IntlProviderWrapper.tsx","components/pages/Home/Home.tsx","hooks/useFormatMessage.ts","components/forms/TextField/TextField.tsx","utils/validators/index.ts","utils/validators/loginValidator.ts","components/pages/Login/Login.tsx","components/pages/Login/LoginContainer.tsx","components/pages/NotFound/NotFound.tsx","routes/paths.ts","routes/index.tsx","theme/index.ts","App.tsx","reportWebVitals.ts","index.tsx","i18n/es.ts"],"names":["es","IntlProviderWrapper","props","children","useState","locale","messages","Home","useFormatMessage","intl","useIntl","formatMessage","useCallback","id","values","formatRequiredField","TextField","name","label","required","controllerProps","textFieldProps","useFormContext","control","errors","formState","error","fieldLabel","render","field","variant","size","helperText","message","Yup","mixed","LoginSchema","object","shape","username","string","password","Login","onSubmit","form","useForm","resolver","yupResolver","defaultValues","Grid","container","alignItems","justifyContent","item","handleSubmit","direction","spacing","type","Button","LoginContainer","data","console","log","NotFound","to","PATHS","LOGIN","HOME","Routes","exact","path","defaultTheme","createTheme","createMyTheme","useStyles","makeStyles","containerRoot","height","App","classes","theme","CssBaseline","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"+PAcEA,U,MCYaC,EAlBuB,SAAAC,GACpC,IAAQC,EAAaD,EAAbC,SACR,EAAiBC,mBDRM,MCQhBC,EAAP,oBACA,EAAgCD,mBAAiCJ,WAAjE,mBAAOM,EAAP,UAQA,OACE,cAAC,IAAD,CAAcD,OAAQA,EAAQC,SAAUA,EAAxC,SACGH,K,gBCbQI,EARQ,WACrB,OACE,mCACE,0C,oDC8CSC,EAlCU,WACvB,IAAMC,EAAkBC,cA8BxB,MAAO,CAAEC,cA5BaC,uBACpB,SACEC,EACAC,GAMA,OADgBL,EAAKE,cAAc,CAAEE,MAAMC,KAG7C,CAACL,IAiBqBM,oBAdIH,uBAC1B,SACEC,EACAC,GAMA,MADa,UAAML,EAAKE,cAAc,CAAEE,MAAMC,GAAjC,QAGf,CAACL,IAG0CA,SC2ChCO,EA/EG,SAChBd,GAEA,IACEe,EAKEf,EALFe,KADF,EAMIf,EAJFgB,aAFF,MAEU,GAFV,EAGEC,EAGEjB,EAHFiB,SAHF,EAMIjB,EAFFkB,uBAJF,MAIoB,GAJpB,IAMIlB,EADFmB,sBALF,MAKmB,GALnB,EAOA,EAGIC,cAFFC,EADF,EACEA,QACaC,EAFf,EAEEC,UAAaD,OAEf,EAA+ChB,IAAvCG,EAAR,EAAQA,cAAeI,EAAvB,EAAuBA,oBAEjBW,EADyBF,EAAtBP,GAGLU,EAAaT,EAcjB,OAbIS,IACFA,EAAaR,EACTJ,EAAoBY,GACpBhB,EAAcgB,IAWlB,8BACE,cAAC,IAAD,2BACMP,GADN,IAEEG,QAASA,EACTN,KAAMA,EACNW,OAAQ,YAAgB,IAAbC,EAAY,EAAZA,MACT,OACE,cAAC,IAAD,qCACEX,MAAOS,GACHN,GACAQ,GAHN,IAIEC,QAAQ,WACRC,KAAK,QACLL,QAASA,EAETM,YAAiB,OAALN,QAAK,IAALA,OAAA,EAAAA,EAAOO,SAAUtB,EAAce,EAAMO,SAAW,a,QCxD1EC,YAAc,CACZC,MAAO,CACLhB,SAAU,yBAICe,QCDAE,EALYF,EAAIG,SAASC,MAAM,CAC5CC,SAAUL,EAAIM,SAASrB,WACvBsB,SAAUP,EAAIM,SAASrB,aC2DVuB,EAvDsB,SAAAxC,GACnC,IAAQyC,EAAazC,EAAbyC,SACFC,EAAOC,YAAsB,CACjCC,SAAUC,YAAYX,GACtBY,cAAe,CACbT,SAAU,GACVE,SAAU,MAGN9B,EAAkBH,IAAlBG,cAER,OACE,mCACE,cAACsC,EAAA,EAAD,CAAMC,WAAS,EAACC,WAAW,SAASC,eAAe,SAAnD,SACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAAC,IAAD,2BAAkBT,GAAlB,aACE,sBAAMD,SAAUC,EAAKU,aAAaX,GAAlC,SACE,eAACM,EAAA,EAAD,CACEC,WAAS,EACTK,UAAU,SACVJ,WAAW,SACXC,eAAe,SACfI,QAAS,EALX,UAOE,cAACP,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAAC,EAAD,CACEpC,KAAK,WACLC,MAAM,qBACNC,UAAQ,MAIZ,cAAC8B,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAAC,EAAD,CACEpC,KAAK,WACLC,MAAM,qBACNC,UAAQ,EACRE,eAAgB,CAAEoC,KAAM,gBAI5B,cAACR,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACK,EAAA,EAAD,CAAQ5B,QAAQ,YAAY2B,KAAK,SAAjC,SACG9C,EAAc,sCCrCpBgD,EAVkB,WAG/B,OACE,mCACE,cAAC,EAAD,CAAOhB,SAJmC,SAAAiB,GAAI,OAAIC,QAAQC,IAAIF,SCQrDG,EAXY,WACzB,OACE,qCACE,sCACA,8BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oCCFOC,EALD,CACZC,MAAO,SACPC,KAAM,SC4BOC,EAxBU,WACvB,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,IAAD,CAAUN,GAAIC,EAAMC,UAGtB,cAAC,IAAD,CAAOI,KAAML,EAAMC,MAAnB,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOI,KAAML,EAAME,KAAnB,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOG,KAAK,IAAZ,SACE,cAAC,EAAD,Y,SCrBJC,EAAeC,cAMNC,EAJO,WACpB,OAAOF,GCEHG,EAAYC,aAAW,WAC3B,MAAO,CACLC,cAAe,CACbC,OAAQ,aAuBCC,EAlBO,WACpB,IAAMC,EAAUL,IAEhB,OACE,cAAC,EAAD,UACE,cAAC,IAAD,CAAkBM,MAAOP,IAAzB,SACE,cAAC,IAAD,UACE,cAACQ,EAAA,EAAD,UACE,cAAChC,EAAA,EAAD,CAAMC,WAAS,EAACgC,UAAWH,EAAQH,cAAnC,SACE,cAAC,EAAD,eCVCO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAShE,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFiE,SAASC,eAAe,SAM1BX,K,gCChBA,OAOenF,UAPJ,CACT,qBAAsB,oBACtB,qBAAsB,gBACtB,kBAAmB,oBACnB,sBAAuB,6B","file":"static/js/main.ca6091c1.chunk.js","sourcesContent":["import es from './es';\r\n\r\nexport const LOCALE_ES = 'es';\r\n\r\nexport const loadTranslation = (\r\n  locale: string\r\n): Promise<Record<string, string>> => {\r\n  if (locale === LOCALE_ES) {\r\n    return import('./es').then(module => module.default);\r\n  }\r\n  throw new Error('Translation not found');\r\n};\r\n\r\nconst messages = {\r\n  es,\r\n};\r\n\r\nexport default messages;\r\n","import { useState } from 'react';\r\nimport { IntlProvider } from 'react-intl';\r\nimport { loadTranslation, LOCALE_ES } from '../../i18n';\r\nimport es from '../../i18n/es';\r\n\r\n/**\r\n * Wrapper of IntlProvider that manage the language changes\r\n */\r\nconst IntlProviderWrapper: React.FC = props => {\r\n  const { children } = props;\r\n  const [locale] = useState(LOCALE_ES);\r\n  const [messages, setMessages] = useState<Record<string, string>>(es);\r\n\r\n  const onChangeLocale = () => {\r\n    loadTranslation(locale).then(newMessages => {\r\n      setMessages(newMessages);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <IntlProvider locale={locale} messages={messages}>\r\n      {children}\r\n    </IntlProvider>\r\n  );\r\n};\r\n\r\nexport default IntlProviderWrapper;\r\n","const Home: React.FC = () => {\r\n  return (\r\n    <>\r\n      <div>Home</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useIntl, IntlShape } from 'react-intl';\r\nimport { useCallback } from 'react';\r\n\r\ntype ReturnType = {\r\n  formatMessage: (\r\n    id: string | number,\r\n    values?: Record<string, string | number | boolean | null | undefined | Date>\r\n  ) => string;\r\n  formatRequiredField: (\r\n    id: string | number,\r\n    values?: Record<string, string | number | boolean | null | undefined | Date>\r\n  ) => string;\r\n  intl: IntlShape;\r\n};\r\n\r\nconst useFormatMessage = (): ReturnType => {\r\n  const intl: IntlShape = useIntl();\r\n\r\n  const formatMessage = useCallback(\r\n    (\r\n      id: string | number,\r\n      values?: Record<\r\n        string,\r\n        string | number | boolean | null | undefined | Date\r\n      >\r\n    ) => {\r\n      const message = intl.formatMessage({ id }, values);\r\n      return message;\r\n    },\r\n    [intl]\r\n  );\r\n\r\n  const formatRequiredField = useCallback(\r\n    (\r\n      id: string | number,\r\n      values?: Record<\r\n        string,\r\n        string | number | boolean | null | undefined | Date\r\n      >\r\n    ) => {\r\n      const message = `${intl.formatMessage({ id }, values)} *`;\r\n      return message;\r\n    },\r\n    [intl]\r\n  );\r\n\r\n  return { formatMessage, formatRequiredField, intl };\r\n};\r\n\r\nexport default useFormatMessage;\r\n","import { TextField as MuiTextField } from '@material-ui/core';\r\nimport {\r\n  Controller,\r\n  FieldError,\r\n  FieldValues,\r\n  useFormContext,\r\n} from 'react-hook-form';\r\nimport useFormatMessage from '../../../hooks/useFormatMessage';\r\nimport { ITextFieldProps } from './interfaces';\r\n\r\nconst TextField = <T extends FieldValues>(\r\n  props: ITextFieldProps<T>\r\n): JSX.Element => {\r\n  const {\r\n    name,\r\n    label = '',\r\n    required,\r\n    controllerProps = {},\r\n    textFieldProps = {},\r\n  } = props;\r\n  const {\r\n    control,\r\n    formState: { errors },\r\n  } = useFormContext<T>();\r\n  const { formatMessage, formatRequiredField } = useFormatMessage();\r\n  const { [name]: fieldError } = errors;\r\n  const error = fieldError as FieldError;\r\n\r\n  let fieldLabel = label;\r\n  if (fieldLabel) {\r\n    fieldLabel = required\r\n      ? formatRequiredField(fieldLabel)\r\n      : formatMessage(fieldLabel);\r\n  }\r\n\r\n  /**\r\n   * Three ways to print errors\r\n   * 1. On TextField\r\n   * 2. Material UI component\r\n   * 3. React Hook Form controller with Material UI component\r\n   */\r\n\r\n  return (\r\n    <div>\r\n      <Controller\r\n        {...controllerProps}\r\n        control={control}\r\n        name={name}\r\n        render={({ field }) => {\r\n          return (\r\n            <MuiTextField\r\n              label={fieldLabel}\r\n              {...textFieldProps}\r\n              {...field}\r\n              variant='outlined'\r\n              size='small'\r\n              error={!!error}\r\n              // 1. On TextField\r\n              helperText={error?.message ? formatMessage(error.message) : ''}\r\n            />\r\n          );\r\n        }}\r\n      />\r\n\r\n      {/* 2. Material UI component */}\r\n      {/* {error?.message && (\r\n        <FormHelperText error>{formatMessage(error.message)}</FormHelperText>\r\n      )} */}\r\n\r\n      {/* 3. React Hook Form controller with Material UI component */}\r\n      {/* <ErrorMessage\r\n        errors={errors}\r\n        name={\r\n          name as FieldName<\r\n            FieldValuesFromFieldErrors<\r\n              DeepMap<DeepPartial<UnionLike<T>>, FieldError>\r\n            >\r\n          >\r\n        }\r\n        render={({ message }) => {\r\n          return (\r\n            <FormHelperText error>{formatMessage(message)}</FormHelperText>\r\n          );\r\n        }}\r\n      /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextField;\r\n","import * as Yup from 'yup';\r\n\r\nYup.setLocale({\r\n  mixed: {\r\n    required: 'validation.required',\r\n  },\r\n});\r\n\r\nexport default Yup;\r\n","import Yup from '.';\r\n\r\nexport const LoginSchema = Yup.object().shape({\r\n  username: Yup.string().required(),\r\n  password: Yup.string().required(),\r\n});\r\n\r\nexport default LoginSchema;\r\n","import { Button, Grid } from '@material-ui/core';\r\nimport { FormProvider, useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport TextField from '../../forms/TextField/TextField';\r\nimport { ILoginInputs, ILoginProps } from './interfaces';\r\nimport LoginSchema from '../../../utils/validators/loginValidator';\r\nimport useFormatMessage from '../../../hooks/useFormatMessage';\r\n\r\nconst Login: React.FC<ILoginProps> = props => {\r\n  const { onSubmit } = props;\r\n  const form = useForm<ILoginInputs>({\r\n    resolver: yupResolver(LoginSchema),\r\n    defaultValues: {\r\n      username: '',\r\n      password: '',\r\n    },\r\n  });\r\n  const { formatMessage } = useFormatMessage();\r\n\r\n  return (\r\n    <>\r\n      <Grid container alignItems='center' justifyContent='center'>\r\n        <Grid item>\r\n          <FormProvider {...form}>\r\n            <form onSubmit={form.handleSubmit(onSubmit)}>\r\n              <Grid\r\n                container\r\n                direction='column'\r\n                alignItems='center'\r\n                justifyContent='center'\r\n                spacing={2}\r\n              >\r\n                <Grid item>\r\n                  <TextField<ILoginInputs>\r\n                    name='username'\r\n                    label='app.login.username'\r\n                    required\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <TextField<ILoginInputs>\r\n                    name='password'\r\n                    label='app.login.password'\r\n                    required\r\n                    textFieldProps={{ type: 'password' }}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Button variant='contained' type='submit'>\r\n                    {formatMessage('app.login.login')}\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </FormProvider>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { SubmitHandler } from 'react-hook-form';\r\nimport { ILoginInputs } from './interfaces';\r\nimport Login from './Login';\r\n\r\nconst LoginContainer: React.FC = () => {\r\n  const onSubmit: SubmitHandler<ILoginInputs> = data => console.log(data);\r\n\r\n  return (\r\n    <>\r\n      <Login onSubmit={onSubmit} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginContainer;\r\n","import { Link } from 'react-router-dom';\r\n\r\nconst NotFound: React.FC = () => {\r\n  return (\r\n    <>\r\n      <div>404</div>\r\n      <div>\r\n        <Link to='/'>Volver al inicio</Link>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","const PATHS = {\r\n  LOGIN: '/login',\r\n  HOME: '/home',\r\n};\r\n\r\nexport default PATHS;\r\n","import { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport Home from '../components/pages/Home/Home';\r\nimport Login from '../components/pages/Login/LoginContainer';\r\nimport NotFound from '../components/pages/NotFound/NotFound';\r\nimport PATHS from './paths';\r\n\r\nconst Routes: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path='/'>\r\n          <Redirect to={PATHS.LOGIN} />\r\n        </Route>\r\n\r\n        <Route path={PATHS.LOGIN}>\r\n          <Login />\r\n        </Route>\r\n\r\n        <Route path={PATHS.HOME}>\r\n          <Home />\r\n        </Route>\r\n\r\n        <Route path='*'>\r\n          <NotFound />\r\n        </Route>\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import { createTheme, Theme } from '@material-ui/core';\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nconst createMyTheme = (): Theme => {\r\n  return defaultTheme;\r\n};\r\n\r\nexport default createMyTheme;\r\n","import { CssBaseline, Grid, makeStyles } from '@material-ui/core';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { SnackbarProvider } from 'notistack';\r\nimport IntlProviderWrapper from './components/IntlProviderWrapper/IntlProviderWrapper';\r\nimport Routes from './routes';\r\nimport createMyTheme from './theme';\r\n\r\nconst useStyles = makeStyles(() => {\r\n  return {\r\n    containerRoot: {\r\n      height: '100vh',\r\n    },\r\n  };\r\n});\r\n\r\nconst App: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <IntlProviderWrapper>\r\n      <MuiThemeProvider theme={createMyTheme()}>\r\n        <SnackbarProvider>\r\n          <CssBaseline>\r\n            <Grid container className={classes.containerRoot}>\r\n              <Routes />\r\n            </Grid>\r\n          </CssBaseline>\r\n        </SnackbarProvider>\r\n      </MuiThemeProvider>\r\n    </IntlProviderWrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","const es = {\r\n  'app.login.username': 'Nombre de usuario',\r\n  'app.login.password': 'Contraseña',\r\n  'app.login.login': 'Iniciar sesión',\r\n  'validation.required': 'El campo es obligatorio',\r\n};\r\n\r\nexport default es;\r\n"],"sourceRoot":""}